// Copyright 2023 Andrew Symington
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// DESCRIPTION
//
// Custom factor for integrating Gen 2 light measurements into a GTSAM model.
// A lot of the code here is selectively copied and simplified from the 
// libsurvive autogenerated code, which is not installed by default.
//
// Lighthouse: looking towards, +x left, +y up, +z into the lighthouse.
// Tracker: looking underside connecors down, +x right, +y info, +x up.


#ifndef LIBSURVIVE_ROS2__POSER_FACTORS_HPP_
#define LIBSURVIVE_ROS2__POSER_FACTORS_HPP_

// For trig functions
#include <cmath>

// Project includes
#include "gtsam/nonlinear/NonlinearFactor.h"
#include "gtsam/geometry/Point3.h"
#include "gtsam/geometry/Pose3.h"
#include "gtsam/inference/Symbol.h"

// The stuff below is extracted from libsurvive until we can implement the equations
// in closed form as pure combinations of other factors.

namespace gtsam {

// Typedefs for mathematical vector types
typedef double LinmathPoint3d[3];
typedef double LinmathAxisAngle[3];

// An axis angle in struct representation
struct LinmathAxisAnglePose {
	LinmathPoint3d Pos;
	LinmathAxisAngle AxisAngleRot;
};

// Base station calibration struct
struct BaseStationCal {
	double phase;
	double tilt;
	double curve;
	double gibpha;
	double gibmag;
	double ogeephase;
	double ogeemag;
};

// Predict a Gen2 X axis angle from object, lighthouse, sensor and calibration params.
static inline double gen_reproject_axis_x_gen2_axis_angle(
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc0)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	const double phase_0 = (*bsc0).phase;
	const double tilt_0 = (*bsc0).tilt;
	const double curve_0 = (*bsc0).curve;
	const double gibPhase_0 = (*bsc0).gibpha;
	const double gibMag_0 = (*bsc0).gibmag;
	const double ogeeMag_0 = (*bsc0).ogeephase;
	const double ogeePhase_0 = (*bsc0).ogeemag;
	const double x0 = obj_qk * obj_qk;
	const double x1 = obj_qi * obj_qi;
	const double x2 = obj_qj * obj_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = cos(x4);
	const double x6 = (1. / x3) * (1 + (-1 * x5));
	const double x7 = (1. / x4) * sin(x4);
	const double x8 = x7 * obj_qj;
	const double x9 = x6 * obj_qk;
	const double x10 = x9 * obj_qi;
	const double x11 = x7 * obj_qi;
	const double x12 = x9 * obj_qj;
	const double x13 = ((x12 + x11) * sensor_y) + obj_pz + ((x10 + (-1 * x8)) * sensor_x) + ((x5 + (x0 * x6)) * sensor_z);
	const double x14 = lh_qk * lh_qk;
	const double x15 = lh_qi * lh_qi;
	const double x16 = lh_qj * lh_qj;
	const double x17 = 1e-10 + x14 + x16 + x15;
	const double x18 = sqrt(x17);
	const double x19 = cos(x18);
	const double x20 = (1. / x17) * (1 + (-1 * x19));
	const double x21 = x7 * obj_qk;
	const double x22 = x6 * obj_qj * obj_qi;
	const double x23 = ((x22 + (-1 * x21)) * sensor_y) + ((x10 + x8) * sensor_z) + ((x5 + (x1 * x6)) * sensor_x) + obj_px;
	const double x24 = (1. / x18) * sin(x18);
	const double x25 = x24 * lh_qj;
	const double x26 = x20 * lh_qk * lh_qi;
	const double x27 = ((x5 + (x2 * x6)) * sensor_y) + ((x22 + x21) * sensor_x) + obj_py + ((x12 + (-1 * x11)) * sensor_z);
	const double x28 = x24 * lh_qi;
	const double x29 = x20 * lh_qj;
	const double x30 = x29 * lh_qk;
	const double x31 = ((x30 + x28) * x27) + ((x26 + (-1 * x25)) * x23) + lh_pz + (x13 * (x19 + (x20 * x14)));
	const double x32 = x24 * lh_qk;
	const double x33 = x29 * lh_qi;
	const double x34 = ((x33 + (-1 * x32)) * x27) + (x23 * (x19 + (x20 * x15))) + lh_px + ((x26 + x25) * x13);
	const double x35 = atan2(-1 * x31, x34);
	const double x36 = (x27 * (x19 + (x20 * x16))) + ((x33 + x32) * x23) + lh_py + ((x30 + (-1 * x28)) * x13);
	const double x37 = 0.523598775598299 + tilt_0;
	const double x38 = cos(x37);
	const double x39 = (x34 * x34) + (x31 * x31);
	const double x40 = asin(x36 * (1. / x38) * (1. / sqrt(x39 + (x36 * x36))));
	const double x41 = 0.0028679863 + (x40 * (-8.0108022e-06 + (-8.0108022e-06 * x40)));
	const double x42 = 5.3685255e-06 + (x40 * x41);
	const double x43 = 0.0076069798 + (x40 * x42);
	const double x44 = x36 * (1. / sqrt(x39)) * tan(x37);
	const double x45 = (sin((-1 * asin(x44)) + x35 + ogeeMag_0) * ogeePhase_0) + curve_0;
	const double x46 = asin(x44 + ((x40 * x40) * x43 * x45 * (1. / (x38 + (-1 * x45 * sin(x37) * ((x40 * (x43 + (x40 * (x42 + (x40 * (x41 + (x40 * (-8.0108022e-06 + (-1.60216044e-05 * x40))))))))) + (x40 * x43)))))));
	return -1.5707963267949 + (-1 * x46) + x35 + (-1 * phase_0) + (-1 * sin(x46 + (-1 * gibPhase_0) + (-1 * x35)) * gibMag_0);
}

// Predict a Gen2 Y axis angle from object, lighthouse, sensor and calibration params.
static inline double gen_reproject_axis_y_gen2_axis_angle(
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc1)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	const double phase_1 = (*bsc1).phase;
	const double tilt_1 = (*bsc1).tilt;
	const double curve_1 = (*bsc1).curve;
	const double gibPhase_1 = (*bsc1).gibpha;
	const double gibMag_1 = (*bsc1).gibmag;
	const double ogeeMag_1 = (*bsc1).ogeephase;
	const double ogeePhase_1 = (*bsc1).ogeemag;
	const double x0 = obj_qk * obj_qk;
	const double x1 = obj_qi * obj_qi;
	const double x2 = obj_qj * obj_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = cos(x4);
	const double x6 = (1. / x3) * (1 + (-1 * x5));
	const double x7 = (1. / x4) * sin(x4);
	const double x8 = x7 * obj_qj;
	const double x9 = x6 * obj_qk;
	const double x10 = x9 * obj_qi;
	const double x11 = x7 * obj_qi;
	const double x12 = x9 * obj_qj;
	const double x13 = ((x12 + x11) * sensor_y) + obj_pz + ((x10 + (-1 * x8)) * sensor_x) + ((x5 + (x0 * x6)) * sensor_z);
	const double x14 = lh_qk * lh_qk;
	const double x15 = lh_qi * lh_qi;
	const double x16 = lh_qj * lh_qj;
	const double x17 = 1e-10 + x14 + x16 + x15;
	const double x18 = sqrt(x17);
	const double x19 = cos(x18);
	const double x20 = (1. / x17) * (1 + (-1 * x19));
	const double x21 = x7 * obj_qk;
	const double x22 = x6 * obj_qj * obj_qi;
	const double x23 = ((x22 + (-1 * x21)) * sensor_y) + ((x10 + x8) * sensor_z) + ((x5 + (x1 * x6)) * sensor_x) + obj_px;
	const double x24 = (1. / x18) * sin(x18);
	const double x25 = x24 * lh_qj;
	const double x26 = x20 * lh_qk * lh_qi;
	const double x27 = ((x5 + (x2 * x6)) * sensor_y) + ((x22 + x21) * sensor_x) + obj_py + ((x12 + (-1 * x11)) * sensor_z);
	const double x28 = x24 * lh_qi;
	const double x29 = x20 * lh_qj;
	const double x30 = x29 * lh_qk;
	const double x31 = ((x30 + x28) * x27) + ((x26 + (-1 * x25)) * x23) + lh_pz + (x13 * (x19 + (x20 * x14)));
	const double x32 = x24 * lh_qk;
	const double x33 = x29 * lh_qi;
	const double x34 = ((x33 + (-1 * x32)) * x27) + (x23 * (x19 + (x20 * x15))) + lh_px + ((x26 + x25) * x13);
	const double x35 = atan2(-1 * x31, x34);
	const double x36 = (x27 * (x19 + (x20 * x16))) + ((x33 + x32) * x23) + lh_py + ((x30 + (-1 * x28)) * x13);
	const double x37 = 0.523598775598299 + (-1 * tilt_1);
	const double x38 = (x34 * x34) + (x31 * x31);
	const double x39 = -1 * x36 * (1. / sqrt(x38)) * tan(x37);
	const double x40 = (sin((-1 * asin(x39)) + ogeeMag_1 + x35) * ogeePhase_1) + curve_1;
	const double x41 = cos(x37);
	const double x42 = asin((1. / x41) * x36 * (1. / sqrt(x38 + (x36 * x36))));
	const double x43 = 0.0028679863 + (x42 * (-8.0108022e-06 + (-8.0108022e-06 * x42)));
	const double x44 = 5.3685255e-06 + (x42 * x43);
	const double x45 = 0.0076069798 + (x42 * x44);
	const double x46 = asin(x39 + (x40 * (x42 * x42) * x45 * (1. / (x41 + (x40 * sin(x37) * ((x42 * (x45 + (x42 * (x44 + (x42 * (x43 + (x42 * (-8.0108022e-06 + (-1.60216044e-05 * x42))))))))) + (x42 * x45)))))));
	return -1.5707963267949 + (-1 * x46) + (-1 * phase_1) + (-1 * sin((-1 * x35) + x46 + (-1 * gibPhase_1)) * gibMag_1) + x35;
}

// Jacobian of reproject_axis_x_gen2 wrt [lh_px, lh_py, lh_pz, lh_qi, lh_qj, lh_qk]
static inline void gen_reproject_axis_x_gen2_jac_lh_p_axis_angle(
  double out[6],
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc0)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	// const double phase_0 = (*bsc0).phase;
	const double tilt_0 = (*bsc0).tilt;
	const double curve_0 = (*bsc0).curve;
	const double gibPhase_0 = (*bsc0).gibpha;
	const double gibMag_0 = (*bsc0).gibmag;
	const double ogeeMag_0 = (*bsc0).ogeephase;
	const double ogeePhase_0 = (*bsc0).ogeemag;
	const double x0 = lh_qk * lh_qk;
	const double x1 = lh_qi * lh_qi;
	const double x2 = lh_qj * lh_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = sin(x4);
	const double x6 = (1. / x4) * x5;
	const double x7 = x6 * lh_qj;
	const double x8 = 1. / x3;
	const double x9 = cos(x4);
	const double x10 = 1 + (-1 * x9);
	const double x11 = x8 * x10;
	const double x12 = x11 * lh_qi;
	const double x13 = x12 * lh_qk;
	const double x14 = obj_qk * obj_qk;
	const double x15 = obj_qi * obj_qi;
	const double x16 = obj_qj * obj_qj;
	const double x17 = 1e-10 + x14 + x16 + x15;
	const double x18 = sqrt(x17);
	const double x19 = cos(x18);
	const double x20 = (1. / x17) * (1 + (-1 * x19));
	const double x21 = (1. / x18) * sin(x18);
	const double x22 = x21 * obj_qj;
	const double x23 = x20 * obj_qk;
	const double x24 = x23 * obj_qi;
	const double x25 = x21 * obj_qi;
	const double x26 = x23 * obj_qj;
	const double x27 = ((x26 + x25) * sensor_y) + ((x24 + (-1 * x22)) * sensor_x) + obj_pz + ((x19 + (x20 * x14)) * sensor_z);
	const double x28 = x21 * obj_qk;
	const double x29 = x20 * obj_qj * obj_qi;
	const double x30 = ((x29 + (-1 * x28)) * sensor_y) + ((x24 + x22) * sensor_z) + ((x19 + (x20 * x15)) * sensor_x) + obj_px;
	const double x31 = ((x29 + x28) * sensor_x) + ((x19 + (x20 * x16)) * sensor_y) + obj_py + ((x26 + (-1 * x25)) * sensor_z);
	const double x32 = x6 * lh_qk;
	const double x33 = -1 * x32;
	const double x34 = x11 * lh_qj;
	const double x35 = x34 * lh_qi;
	const double x36 = ((x35 + x33) * x31) + lh_px + (x30 * (x9 + (x1 * x11))) + (x27 * (x13 + x7));
	const double x37 = x6 * lh_qi;
	const double x38 = -1 * x37;
	const double x39 = x34 * lh_qk;
	const double x40 = (x31 * (x9 + (x2 * x11))) + lh_py + ((x35 + x32) * x30) + ((x39 + x38) * x27);
	const double x41 = x40 * x36;
	const double x42 = 0.523598775598299 + tilt_0;
	const double x43 = tan(x42);
	const double x44 = -1 * x7;
	const double x45 = ((x39 + x37) * x31) + ((x13 + x44) * x30) + lh_pz + (x27 * (x9 + (x0 * x11)));
	const double x46 = x36 * x36;
	const double x47 = x46 + (x45 * x45);
	const double x48 = x43 * (1. / (x47 * sqrt(x47)));
	const double x49 = x41 * x48;
	const double x50 = cos(x42);
	const double x51 = 1. / x50;
	const double x52 = x40 * x40;
	const double x53 = x47 + x52;
	const double x54 = (1. / sqrt(x53)) * x51;
	const double x55 = asin(x54 * x40);
	const double x56 = -8.0108022e-06 + (-1.60216044e-05 * x55);
	const double x57 = 8.0108022e-06 * x55;
	const double x58 = -8.0108022e-06 + (-1 * x57);
	const double x59 = 0.0028679863 + (x58 * x55);
	const double x60 = x59 + (x56 * x55);
	const double x61 = 5.3685255e-06 + (x55 * x59);
	const double x62 = x61 + (x60 * x55);
	const double x63 = 0.0076069798 + (x61 * x55);
	const double x64 = x63 + (x62 * x55);
	const double x65 = 1. / sqrt(1 + (-1 * (1. / (x50 * x50)) * (1. / x53) * x52));
	const double x66 = (1. / (x53 * sqrt(x53))) * x51;
	const double x67 = x66 * x41;
	const double x68 = x67 * x65;
	const double x69 = -1 * x68 * x58;
	const double x70 = 2.40324066e-05 * x55;
	const double x71 = x65 * x59;
	const double x72 = (x55 * (x69 + (x68 * x57))) + (-1 * x71 * x67);
	const double x73 = (x72 * x55) + (-1 * x61 * x68);
	const double x74 = atan2(-1 * x45, x36);
	const double x75 = x43 * (1. / sqrt(x47));
	const double x76 = x75 * x40;
	const double x77 = (-1 * asin(x76)) + x74 + ogeeMag_0;
	const double x78 = (sin(x77) * ogeePhase_0) + curve_0;
	const double x79 = sin(x42);
	const double x80 = x79 * x78;
	const double x81 = 1. / x47;
	const double x82 = 1. / sqrt(1 + (-1 * x81 * x52 * (x43 * x43)));
	const double x83 = x81 * x45;
	const double x84 = x83 + (x82 * x49);
	const double x85 = cos(x77) * ogeePhase_0;
	const double x86 = x63 * x55;
	const double x87 = (x64 * x55) + x86;
	const double x88 = x87 * x79;
	const double x89 = x88 * x85;
	const double x90 = x50 + (-1 * x80 * x87);
	const double x91 = x55 * x55;
	const double x92 = x78 * x91;
	const double x93 = x63 * x92 * (1. / (x90 * x90));
	const double x94 = 2 * x36;
	const double x95 = x66 * x40;
	const double x96 = 1. / x90;
	const double x97 = x86 * x78 * x96;
	const double x98 = x65 * x97 * x95;
	const double x99 = x92 * x96;
	const double x100 = x63 * x91 * x96;
	const double x101 = x85 * x100;
	const double x102 = x76 + (x63 * x99);
	const double x103 = 1. / sqrt(1 + (-1 * (x102 * x102)));
	const double x104 = x103 * ((x84 * x101) + (x73 * x99) + (-1 * x98 * x94) + (-1 * x49) + (-1 * x93 * ((-1 * x89 * x84) + (-1 * x80 * ((x73 * x55) + (-1 * x63 * x68) + (-1 * x64 * x68) + (x55 * (x73 + (x55 * (x72 + (-1 * x60 * x68) + (x55 * ((x70 * x68) + x69 + (-1 * x68 * x56))))) + (-1 * x62 * x68))))))));
	const double x105 = cos((-1 * asin(x102)) + gibPhase_0 + x74) * gibMag_0;
	const double x106 = x65 * (x54 + (-1 * x66 * x52));
	const double x107 = x58 * x106;
	const double x108 = (x55 * (x107 + (-1 * x57 * x106))) + (x59 * x106);
	const double x109 = (x55 * x108) + (x61 * x106);
	const double x110 = x82 * x75;
	const double x111 = 2 * x97;
	const double x112 = x103 * ((x106 * x111) + (-1 * x101 * x110) + (x99 * x109) + x75 + (-1 * x93 * ((x89 * x110) + (-1 * x80 * ((x63 * x106) + (x55 * x109) + (x64 * x106) + (x55 * (x109 + (x55 * (x108 + (x60 * x106) + (x55 * (x107 + (-1 * x70 * x106) + (x56 * x106))))) + (x62 * x106))))))));
	const double x113 = x40 * x48;
	const double x114 = x45 * x113;
	const double x115 = x95 * x45;
	const double x116 = x65 * x115;
	const double x117 = -1 * x58 * x116;
	const double x118 = (x55 * (x117 + (x57 * x116))) + (-1 * x71 * x115);
	const double x119 = (x55 * x118) + (-1 * x61 * x116);
	const double x120 = x81 * x36;
	const double x121 = -1 * x120;
	const double x122 = x121 + (x82 * x114);
	const double x123 = 2 * x45;
	const double x124 = x103 * ((-1 * x98 * x123) + (x101 * x122) + (-1 * x114) + (x99 * x119) + (-1 * x93 * ((-1 * x89 * x122) + (-1 * x80 * ((-1 * x63 * x116) + (x55 * (x119 + (x55 * (x118 + (-1 * x60 * x116) + (x55 * ((x70 * x116) + x117 + (-1 * x56 * x116))))) + (-1 * x62 * x116))) + (-1 * x64 * x116) + (x55 * x119))))));
	const double x125 = 2 * (1. / (x3 * x3)) * x10;
	const double x126 = x125 * lh_qi;
	const double x127 = (1. / (x3 * sqrt(x3))) * x5;
	const double x128 = x2 * x127;
	const double x129 = (x128 * lh_qi) + (-1 * x2 * x126);
	const double x130 = x8 * x9;
	const double x131 = x1 * x130;
	const double x132 = x1 * x127;
	const double x133 = lh_qj * lh_qi;
	const double x134 = x127 * lh_qk;
	const double x135 = x125 * lh_qk;
	const double x136 = (-1 * x133 * x135) + (x133 * x134);
	const double x137 = x136 + (-1 * x6);
	const double x138 = x125 * lh_qj;
	const double x139 = (x132 * lh_qj) + (-1 * x1 * x138);
	const double x140 = x139 + x34;
	const double x141 = x130 * lh_qk;
	const double x142 = x141 * lh_qi;
	const double x143 = x134 * lh_qi;
	const double x144 = (-1 * x143) + x142;
	const double x145 = ((x144 + x140) * x30) + (x31 * (x129 + x38)) + (x27 * (x137 + (-1 * x131) + x132));
	const double x146 = 2 * x40;
	const double x147 = x143 + (-1 * x142);
	const double x148 = x11 * lh_qk;
	const double x149 = (x132 * lh_qk) + (-1 * x1 * x135);
	const double x150 = x149 + x148;
	const double x151 = x130 * x133;
	const double x152 = x127 * x133;
	const double x153 = (-1 * x152) + x151;
	const double x154 = lh_qi * lh_qi * lh_qi;
	const double x155 = (((2 * x12) + (-1 * x125 * x154) + x38 + (x127 * x154)) * x30) + ((x147 + x140) * x31) + ((x153 + x150) * x27);
	const double x156 = x136 + x6;
	const double x157 = x0 * x127;
	const double x158 = (x157 * lh_qi) + (-1 * x0 * x126);
	const double x159 = x152 + (-1 * x151);
	const double x160 = ((x159 + x150) * x30) + (x31 * (x156 + x131 + (-1 * x132))) + (x27 * (x158 + x38));
	const double x161 = (x123 * x160) + (x94 * x155);
	const double x162 = 1.0/2.0 * x95;
	const double x163 = x65 * ((x54 * x145) + (-1 * x162 * (x161 + (x146 * x145))));
	const double x164 = x58 * x163;
	const double x165 = (x55 * (x164 + (-1 * x57 * x163))) + (x59 * x163);
	const double x166 = (x55 * x165) + (x61 * x163);
	const double x167 = 1.0/2.0 * x113;
	const double x168 = (x75 * x145) + (-1 * x161 * x167);
	const double x169 = 1. / x36;
	const double x170 = x45 * (1. / x46);
	const double x171 = x81 * x46;
	const double x172 = ((x170 * x155) + (-1 * x160 * x169)) * x171;
	const double x173 = x172 + (-1 * x82 * x168);
	const double x174 = x103 * ((-1 * x93 * ((-1 * x89 * x173) + (-1 * x80 * ((x55 * x166) + (x55 * (x166 + (x55 * (x165 + (x60 * x163) + (x55 * ((-1 * x70 * x163) + x164 + (x56 * x163))))) + (x62 * x163))) + (x63 * x163) + (x64 * x163))))) + (x101 * x173) + x168 + (x99 * x166) + (x111 * x163));
	const double x175 = lh_qj * lh_qj * lh_qj;
	const double x176 = (x128 * lh_qk) + (-1 * x2 * x135);
	const double x177 = x176 + x148;
	const double x178 = x129 + x12;
	const double x179 = x141 * lh_qj;
	const double x180 = x134 * lh_qj;
	const double x181 = (-1 * x180) + x179;
	const double x182 = ((x181 + x178) * x30) + (((-1 * x125 * x175) + (x127 * x175) + x44 + (2 * x34)) * x31) + ((x177 + x159) * x27);
	const double x183 = x180 + (-1 * x179);
	const double x184 = x2 * x130;
	const double x185 = (x30 * (x139 + x44)) + ((x183 + x178) * x31) + (x27 * (x156 + x184 + (-1 * x128)));
	const double x186 = (x157 * lh_qj) + (-1 * x0 * x138);
	const double x187 = ((x177 + x153) * x31) + (x30 * (x137 + (-1 * x184) + x128)) + (x27 * (x186 + x44));
	const double x188 = (x123 * x187) + (x94 * x185);
	const double x189 = x65 * ((x54 * x182) + (-1 * x162 * (x188 + (x182 * x146))));
	const double x190 = x58 * x189;
	const double x191 = (x55 * (x190 + (-1 * x57 * x189))) + (x59 * x189);
	const double x192 = (x55 * x191) + (x61 * x189);
	const double x193 = (x75 * x182) + (-1 * x167 * x188);
	const double x194 = ((x170 * x185) + (-1 * x169 * x187)) * x171;
	const double x195 = x194 + (-1 * x82 * x193);
	const double x196 = x103 * ((x111 * x189) + x193 + (x99 * x192) + (-1 * x93 * ((-1 * x89 * x195) + (-1 * x80 * ((x63 * x189) + (x55 * x192) + (x64 * x189) + (x55 * (x192 + (x55 * ((x60 * x189) + x191 + (x55 * ((-1 * x70 * x189) + (x56 * x189) + x190)))) + (x62 * x189))))))) + (x101 * x195));
	const double x197 = x186 + x34;
	const double x198 = x0 * x130;
	const double x199 = ((x197 + x147) * x27) + (x30 * (x156 + (-1 * x157) + x198)) + (x31 * (x176 + x33));
	const double x200 = x158 + x12;
	const double x201 = (x30 * (x149 + x33)) + (x31 * (x137 + x157 + (-1 * x198))) + ((x200 + x181) * x27);
	const double x202 = lh_qk * lh_qk * lh_qk;
	const double x203 = ((x200 + x183) * x30) + ((x197 + x144) * x31) + (x27 * (x33 + (2 * x148) + (x202 * x127) + (-1 * x202 * x125)));
	const double x204 = (x203 * x123) + (x94 * x201);
	const double x205 = x65 * ((x54 * x199) + (-1 * x162 * (x204 + (x199 * x146))));
	const double x206 = (x75 * x199) + (-1 * x204 * x167);
	const double x207 = ((x201 * x170) + (-1 * x203 * x169)) * x171;
	const double x208 = x85 * (x207 + (-1 * x82 * x206));
	const double x209 = x58 * x205;
	const double x210 = (x55 * (x209 + (-1 * x57 * x205))) + (x59 * x205);
	const double x211 = (x55 * x210) + (x61 * x205);
	const double x212 = x103 * (x206 + (-1 * x93 * ((-1 * x88 * x208) + (-1 * x80 * ((x63 * x205) + (x64 * x205) + (x55 * x211) + (x55 * (x211 + (x55 * (x210 + (x60 * x205) + (x55 * ((-1 * x70 * x205) + x209 + (x56 * x205))))) + (x62 * x205))))))) + (x99 * x211) + (x205 * x111) + (x208 * x100));
	out[0] = (-1 * x105 * ((-1 * x83) + x104)) + x83 + (-1 * x104);
	out[1] = (-1 * x105 * x112) + (-1 * x112);
	out[2] = x121 + (-1 * x124) + (-1 * (x120 + x124) * x105);
	out[3] = x172 + (-1 * x174) + (-1 * ((-1 * x172) + x174) * x105);
	out[4] = x194 + (-1 * x196) + (-1 * ((-1 * x194) + x196) * x105);
	out[5] = x207 + (-1 * x212) + (-1 * ((-1 * x207) + x212) * x105);
}

// Jacobian of reproject_axis_y_gen2 wrt [lh_px, lh_py, lh_pz, lh_qi, lh_qj, lh_qk]
static inline void gen_reproject_axis_y_gen2_jac_lh_p_axis_angle(
  double out[6],
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc1)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	// const double phase_1 = (*bsc1).phase;
	const double tilt_1 = (*bsc1).tilt;
	const double curve_1 = (*bsc1).curve;
	const double gibPhase_1 = (*bsc1).gibpha;
	const double gibMag_1 = (*bsc1).gibmag;
	const double ogeeMag_1 = (*bsc1).ogeephase;
	const double ogeePhase_1 = (*bsc1).ogeemag;
	const double x0 = obj_qk * obj_qk;
	const double x1 = obj_qi * obj_qi;
	const double x2 = obj_qj * obj_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = cos(x4);
	const double x6 = (1. / x3) * (1 + (-1 * x5));
	const double x7 = (1. / x4) * sin(x4);
	const double x8 = x7 * obj_qj;
	const double x9 = x6 * obj_qk;
	const double x10 = x9 * obj_qi;
	const double x11 = x7 * obj_qi;
	const double x12 = x9 * obj_qj;
	const double x13 = ((x12 + x11) * sensor_y) + obj_pz + ((x10 + (-1 * x8)) * sensor_x) + ((x5 + (x0 * x6)) * sensor_z);
	const double x14 = lh_qk * lh_qk;
	const double x15 = lh_qi * lh_qi;
	const double x16 = lh_qj * lh_qj;
	const double x17 = 1e-10 + x14 + x16 + x15;
	const double x18 = 1. / x17;
	const double x19 = sqrt(x17);
	const double x20 = cos(x19);
	const double x21 = 1 + (-1 * x20);
	const double x22 = x21 * x18;
	const double x23 = x7 * obj_qk;
	const double x24 = x6 * obj_qj * obj_qi;
	const double x25 = ((x10 + x8) * sensor_z) + ((x24 + (-1 * x23)) * sensor_y) + ((x5 + (x1 * x6)) * sensor_x) + obj_px;
	const double x26 = sin(x19);
	const double x27 = x26 * (1. / x19);
	const double x28 = x27 * lh_qj;
	const double x29 = -1 * x28;
	const double x30 = x22 * lh_qk;
	const double x31 = x30 * lh_qi;
	const double x32 = ((x5 + (x2 * x6)) * sensor_y) + ((x24 + x23) * sensor_x) + obj_py + ((x12 + (-1 * x11)) * sensor_z);
	const double x33 = x27 * lh_qi;
	const double x34 = x30 * lh_qj;
	const double x35 = ((x34 + x33) * x32) + ((x31 + x29) * x25) + lh_pz + (x13 * (x20 + (x22 * x14)));
	const double x36 = x27 * lh_qk;
	const double x37 = -1 * x36;
	const double x38 = x22 * lh_qi;
	const double x39 = x38 * lh_qj;
	const double x40 = ((x39 + x37) * x32) + (x25 * (x20 + (x22 * x15))) + lh_px + ((x31 + x28) * x13);
	const double x41 = x40 * x40;
	const double x42 = x41 + (x35 * x35);
	const double x43 = 1. / x42;
	const double x44 = x43 * x35;
	const double x45 = -1 * x33;
	const double x46 = (x32 * (x20 + (x22 * x16))) + ((x39 + x36) * x25) + lh_py + ((x34 + x45) * x13);
	const double x47 = 0.523598775598299 + (-1 * tilt_1);
	const double x48 = cos(x47);
	const double x49 = 1. / x48;
	const double x50 = x46 * x46;
	const double x51 = x42 + x50;
	const double x52 = (1. / sqrt(x51)) * x49;
	const double x53 = asin(x52 * x46);
	const double x54 = 8.0108022e-06 * x53;
	const double x55 = -8.0108022e-06 + (-1 * x54);
	const double x56 = 0.0028679863 + (x53 * x55);
	const double x57 = 5.3685255e-06 + (x53 * x56);
	const double x58 = 0.0076069798 + (x53 * x57);
	const double x59 = x53 * x53;
	const double x60 = atan2(-1 * x35, x40);
	const double x61 = tan(x47);
	const double x62 = x61 * (1. / sqrt(x42));
	const double x63 = -1 * x62 * x46;
	const double x64 = ogeeMag_1 + (-1 * asin(x63)) + x60;
	const double x65 = (sin(x64) * ogeePhase_1) + curve_1;
	const double x66 = x53 * x58;
	const double x67 = -8.0108022e-06 + (-1.60216044e-05 * x53);
	const double x68 = x56 + (x67 * x53);
	const double x69 = x57 + (x68 * x53);
	const double x70 = x58 + (x69 * x53);
	const double x71 = (x70 * x53) + x66;
	const double x72 = sin(x47);
	const double x73 = x72 * x65;
	const double x74 = x48 + (x71 * x73);
	const double x75 = 1. / x74;
	const double x76 = x75 * x65;
	const double x77 = x76 * x59;
	const double x78 = x63 + (x77 * x58);
	const double x79 = 1. / sqrt(1 + (-1 * (x78 * x78)));
	const double x80 = x40 * x46;
	const double x81 = x61 * (1. / (x42 * sqrt(x42)));
	const double x82 = x80 * x81;
	const double x83 = 1. / sqrt(1 + (-1 * x50 * (1. / x51) * (1. / (x48 * x48))));
	const double x84 = 2 * x46;
	const double x85 = (1. / (x51 * sqrt(x51))) * x49;
	const double x86 = x76 * x66;
	const double x87 = x83 * x84 * x85 * x86;
	const double x88 = 1. / sqrt(1 + (-1 * (x61 * x61) * x50 * x43));
	const double x89 = x44 + (-1 * x82 * x88);
	const double x90 = cos(x64) * ogeePhase_1;
	const double x91 = x71 * x72;
	const double x92 = x91 * x90;
	const double x93 = x83 * x70;
	const double x94 = x80 * x85;
	const double x95 = x83 * x94;
	const double x96 = x83 * x55;
	const double x97 = -1 * x96 * x94;
	const double x98 = 2.40324066e-05 * x53;
	const double x99 = (-1 * x56 * x95) + (x53 * (x97 + (x54 * x95)));
	const double x100 = (-1 * x57 * x95) + (x53 * x99);
	const double x101 = x83 * x58;
	const double x102 = x58 * x59;
	const double x103 = (1. / (x74 * x74)) * x65 * x102;
	const double x104 = x75 * x102;
	const double x105 = x90 * x104;
	const double x106 = x79 * ((x77 * x100) + (x89 * x105) + x82 + (-1 * x103 * ((x73 * ((x53 * x100) + (-1 * x94 * x101) + (-1 * x93 * x94) + (x53 * (x100 + (x53 * (x99 + (-1 * x68 * x95) + (x53 * (x97 + (x98 * x95) + (-1 * x67 * x95))))) + (-1 * x69 * x95))))) + (x89 * x92))) + (-1 * x87 * x40));
	const double x107 = cos((-1 * asin(x78)) + x60 + gibPhase_1) * gibMag_1;
	const double x108 = x52 + (-1 * x85 * x50);
	const double x109 = x83 * x108;
	const double x110 = 2 * x86;
	const double x111 = x88 * x62;
	const double x112 = x96 * x108;
	const double x113 = (x56 * x109) + (x53 * (x112 + (-1 * x54 * x109)));
	const double x114 = (x57 * x109) + (x53 * x113);
	const double x115 = x79 * ((x105 * x111) + (x77 * x114) + (-1 * x62) + (x109 * x110) + (-1 * x103 * ((x73 * ((x53 * x114) + (x58 * x109) + (x70 * x109) + (x53 * (x114 + (x53 * (x113 + (x68 * x109) + (x53 * ((-1 * x98 * x109) + x112 + (x67 * x109))))) + (x69 * x109))))) + (x92 * x111))));
	const double x116 = x40 * x43;
	const double x117 = -1 * x116;
	const double x118 = x81 * x46;
	const double x119 = x35 * x118;
	const double x120 = x117 + (-1 * x88 * x119);
	const double x121 = x85 * x46;
	const double x122 = x35 * x121;
	const double x123 = x83 * x122;
	const double x124 = -1 * x96 * x122;
	const double x125 = (-1 * x56 * x123) + (x53 * (x124 + (x54 * x123)));
	const double x126 = (-1 * x57 * x123) + (x53 * x125);
	const double x127 = x79 * ((x77 * x126) + (-1 * x103 * ((x73 * ((-1 * x101 * x122) + (x53 * x126) + (-1 * x93 * x122) + (x53 * (x126 + (x53 * (x125 + (-1 * x68 * x123) + (x53 * ((x98 * x123) + (-1 * x67 * x123) + x124)))) + (-1 * x69 * x123))))) + (x92 * x120))) + (x105 * x120) + x119 + (-1 * x87 * x35));
	const double x128 = 2 * x21 * (1. / (x17 * x17));
	const double x129 = x26 * (1. / (x17 * sqrt(x17)));
	const double x130 = x16 * x129;
	const double x131 = (x130 * lh_qi) + (-1 * x16 * x128 * lh_qi);
	const double x132 = x20 * x18;
	const double x133 = x15 * x132;
	const double x134 = x15 * x129;
	const double x135 = x129 * lh_qk;
	const double x136 = x135 * lh_qi;
	const double x137 = lh_qk * lh_qi;
	const double x138 = x128 * lh_qj;
	const double x139 = (-1 * x137 * x138) + (x136 * lh_qj);
	const double x140 = x139 + (-1 * x27);
	const double x141 = x22 * lh_qj;
	const double x142 = (x134 * lh_qj) + (-1 * x15 * x138);
	const double x143 = x142 + x141;
	const double x144 = x132 * x137;
	const double x145 = (-1 * x136) + x144;
	const double x146 = ((x145 + x143) * x25) + (x32 * (x131 + x45)) + (x13 * (x140 + (-1 * x133) + x134));
	const double x147 = x136 + (-1 * x144);
	const double x148 = x128 * lh_qk;
	const double x149 = (x134 * lh_qk) + (-1 * x15 * x148);
	const double x150 = x149 + x30;
	const double x151 = x132 * lh_qj;
	const double x152 = x151 * lh_qi;
	const double x153 = x129 * lh_qj * lh_qi;
	const double x154 = (-1 * x153) + x152;
	const double x155 = lh_qi * lh_qi * lh_qi;
	const double x156 = (((2 * x38) + (-1 * x128 * x155) + x45 + (x129 * x155)) * x25) + ((x147 + x143) * x32) + ((x154 + x150) * x13);
	const double x157 = 2 * x40;
	const double x158 = x139 + x27;
	const double x159 = x14 * x128;
	const double x160 = x14 * x129;
	const double x161 = (x160 * lh_qi) + (-1 * x159 * lh_qi);
	const double x162 = x153 + (-1 * x152);
	const double x163 = ((x162 + x150) * x25) + (x32 * (x133 + x158 + (-1 * x134))) + (x13 * (x161 + x45));
	const double x164 = 2 * x35;
	const double x165 = (x164 * x163) + (x156 * x157);
	const double x166 = 1.0/2.0 * x121;
	const double x167 = (x52 * x146) + (-1 * x166 * (x165 + (x84 * x146)));
	const double x168 = x83 * x167;
	const double x169 = x96 * x167;
	const double x170 = (x56 * x168) + (x53 * (x169 + (-1 * x54 * x168)));
	const double x171 = (x57 * x168) + (x53 * x170);
	const double x172 = 1.0/2.0 * x118;
	const double x173 = (-1 * x62 * x146) + (x165 * x172);
	const double x174 = 1. / x40;
	const double x175 = (1. / x41) * x35;
	const double x176 = x41 * x43;
	const double x177 = ((x175 * x156) + (-1 * x163 * x174)) * x176;
	const double x178 = x177 + (-1 * x88 * x173);
	const double x179 = x79 * ((-1 * x103 * ((x73 * ((x58 * x168) + (x53 * x171) + (x70 * x168) + (x53 * (x171 + (x53 * (x170 + (x68 * x168) + (x53 * ((-1 * x98 * x168) + x169 + (x67 * x168))))) + (x69 * x168))))) + (x92 * x178))) + (x77 * x171) + x173 + (x110 * x168) + (x105 * x178));
	const double x180 = lh_qj * lh_qj * lh_qj;
	const double x181 = (x130 * lh_qk) + (-1 * x16 * x148);
	const double x182 = x181 + x30;
	const double x183 = x131 + x38;
	const double x184 = x151 * lh_qk;
	const double x185 = x135 * lh_qj;
	const double x186 = (-1 * x185) + x184;
	const double x187 = ((x186 + x183) * x25) + (x32 * ((-1 * x128 * x180) + (x129 * x180) + x29 + (2 * x141))) + ((x162 + x182) * x13);
	const double x188 = x185 + (-1 * x184);
	const double x189 = x16 * x132;
	const double x190 = (x25 * (x142 + x29)) + ((x188 + x183) * x32) + (x13 * (x158 + x189 + (-1 * x130)));
	const double x191 = (x160 * lh_qj) + (-1 * x159 * lh_qj);
	const double x192 = (x25 * ((-1 * x189) + x140 + x130)) + ((x182 + x154) * x32) + (x13 * (x191 + x29));
	const double x193 = (x164 * x192) + (x190 * x157);
	const double x194 = x83 * ((x52 * x187) + (-1 * x166 * (x193 + (x84 * x187))));
	const double x195 = x55 * x194;
	const double x196 = (x56 * x194) + (x53 * (x195 + (-1 * x54 * x194)));
	const double x197 = (x57 * x194) + (x53 * x196);
	const double x198 = (-1 * x62 * x187) + (x172 * x193);
	const double x199 = ((x175 * x190) + (-1 * x174 * x192)) * x176;
	const double x200 = x199 + (-1 * x88 * x198);
	const double x201 = x79 * ((-1 * x103 * ((x73 * ((x70 * x194) + (x53 * (x197 + (x53 * (x196 + (x68 * x194) + (x53 * ((-1 * x98 * x194) + x195 + (x67 * x194))))) + (x69 * x194))) + (x58 * x194) + (x53 * x197))) + (x92 * x200))) + (x77 * x197) + x198 + (x110 * x194) + (x200 * x105));
	const double x202 = x14 * x132;
	const double x203 = x161 + x38;
	const double x204 = (x25 * (x149 + x37)) + (x32 * (x140 + x160 + (-1 * x202))) + ((x203 + x186) * x13);
	const double x205 = x191 + x141;
	const double x206 = lh_qk * lh_qk * lh_qk;
	const double x207 = ((x203 + x188) * x25) + ((x205 + x145) * x32) + (((2 * x30) + x37 + (x206 * x129) + (-1 * x206 * x128)) * x13);
	const double x208 = (x207 * x164) + (x204 * x157);
	const double x209 = (x25 * ((-1 * x160) + x158 + x202)) + ((x205 + x147) * x13) + (x32 * (x181 + x37));
	const double x210 = (-1 * x62 * x209) + (x208 * x172);
	const double x211 = ((x204 * x175) + (-1 * x207 * x174)) * x176;
	const double x212 = x90 * (x211 + (-1 * x88 * x210));
	const double x213 = (x52 * x209) + (-1 * x166 * (x208 + (x84 * x209)));
	const double x214 = x83 * x213;
	const double x215 = x96 * x213;
	const double x216 = (x56 * x214) + (x53 * (x215 + (-1 * x54 * x214)));
	const double x217 = (x57 * x214) + (x53 * x216);
	const double x218 = x79 * (x210 + (-1 * x103 * ((x73 * ((x53 * x217) + (x70 * x214) + (x58 * x214) + (x53 * (x217 + (x53 * (x216 + (x68 * x214) + (x53 * (x215 + (-1 * x98 * x214) + (x67 * x214))))) + (x69 * x214))))) + (x91 * x212))) + (x214 * x110) + (x212 * x104) + (x77 * x217));
	out[0] = (-1 * x107 * ((-1 * x44) + x106)) + x44 + (-1 * x106);
	out[1] = (-1 * x107 * x115) + (-1 * x115);
	out[2] = (-1 * (x116 + x127) * x107) + x117 + (-1 * x127);
	out[3] = (-1 * ((-1 * x177) + x179) * x107) + (-1 * x179) + x177;
	out[4] = (-1 * ((-1 * x199) + x201) * x107) + (-1 * x201) + x199;
	out[5] = (-1 * ((-1 * x211) + x218) * x107) + (-1 * x218) + x211;
}


// Jacobian of reproject_axis_x_gen2 wrt [obj_px, obj_py, obj_pz, obj_qi, obj_qj, obj_qk]
static inline void gen_reproject_axis_x_gen2_jac_obj_p_axis_angle(
  double out[6],
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc0)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	// const double phase_0 = (*bsc0).phase;
	const double tilt_0 = (*bsc0).tilt;
	const double curve_0 = (*bsc0).curve;
	const double gibPhase_0 = (*bsc0).gibpha;
	const double gibMag_0 = (*bsc0).gibmag;
	const double ogeeMag_0 = (*bsc0).ogeephase;
	const double ogeePhase_0 = (*bsc0).ogeemag;
	const double x0 = lh_qk * lh_qk;
	const double x1 = lh_qi * lh_qi;
	const double x2 = lh_qj * lh_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = (1. / x4) * sin(x4);
	const double x6 = x5 * lh_qi;
	const double x7 = cos(x4);
	const double x8 = (1. / x3) * (1 + (-1 * x7));
	const double x9 = x8 * lh_qj;
	const double x10 = x9 * lh_qk;
	const double x11 = x10 + (-1 * x6);
	const double x12 = obj_qk * obj_qk;
	const double x13 = obj_qi * obj_qi;
	const double x14 = obj_qj * obj_qj;
	const double x15 = 1e-10 + x14 + x12 + x13;
	const double x16 = 1. / x15;
	const double x17 = sqrt(x15);
	const double x18 = cos(x17);
	const double x19 = 1 + (-1 * x18);
	const double x20 = x19 * x16;
	const double x21 = sin(x17);
	const double x22 = x21 * (1. / x17);
	const double x23 = x22 * obj_qj;
	const double x24 = -1 * x23;
	const double x25 = x20 * obj_qk;
	const double x26 = x25 * obj_qi;
	const double x27 = x22 * obj_qi;
	const double x28 = x25 * obj_qj;
	const double x29 = ((x26 + x24) * sensor_x) + obj_pz + ((x28 + x27) * sensor_y) + ((x18 + (x20 * x12)) * sensor_z);
	const double x30 = x22 * obj_qk;
	const double x31 = -1 * x30;
	const double x32 = x20 * obj_qi;
	const double x33 = x32 * obj_qj;
	const double x34 = ((x33 + x31) * sensor_y) + ((x26 + x23) * sensor_z) + ((x18 + (x20 * x13)) * sensor_x) + obj_px;
	const double x35 = x5 * lh_qk;
	const double x36 = x9 * lh_qi;
	const double x37 = x36 + x35;
	const double x38 = -1 * x27;
	const double x39 = ((x18 + (x20 * x14)) * sensor_y) + ((x33 + x30) * sensor_x) + obj_py + ((x28 + x38) * sensor_z);
	const double x40 = x7 + (x2 * x8);
	const double x41 = (x40 * x39) + (x34 * x37) + lh_py + (x29 * x11);
	const double x42 = 0.523598775598299 + tilt_0;
	const double x43 = cos(x42);
	const double x44 = 1. / x43;
	const double x45 = x41 * x41;
	const double x46 = x7 + (x0 * x8);
	const double x47 = x5 * lh_qj;
	const double x48 = x8 * lh_qk * lh_qi;
	const double x49 = x48 + (-1 * x47);
	const double x50 = x10 + x6;
	const double x51 = (x50 * x39) + (x49 * x34) + lh_pz + (x46 * x29);
	const double x52 = x48 + x47;
	const double x53 = x7 + (x1 * x8);
	const double x54 = x36 + (-1 * x35);
	const double x55 = (x54 * x39) + (x53 * x34) + lh_px + (x52 * x29);
	const double x56 = x55 * x55;
	const double x57 = x56 + (x51 * x51);
	const double x58 = x57 + x45;
	const double x59 = (1. / sqrt(x58)) * x44;
	const double x60 = asin(x59 * x41);
	const double x61 = 8.0108022e-06 * x60;
	const double x62 = -8.0108022e-06 + (-1 * x61);
	const double x63 = 0.0028679863 + (x60 * x62);
	const double x64 = 5.3685255e-06 + (x60 * x63);
	const double x65 = 0.0076069798 + (x60 * x64);
	const double x66 = x60 * x65;
	const double x67 = -8.0108022e-06 + (-1.60216044e-05 * x60);
	const double x68 = x63 + (x60 * x67);
	const double x69 = x64 + (x60 * x68);
	const double x70 = x65 + (x60 * x69);
	const double x71 = (x70 * x60) + x66;
	const double x72 = atan2(-1 * x51, x55);
	const double x73 = tan(x42);
	const double x74 = x73 * (1. / sqrt(x57));
	const double x75 = x74 * x41;
	const double x76 = (-1 * asin(x75)) + x72 + ogeeMag_0;
	const double x77 = (sin(x76) * ogeePhase_0) + curve_0;
	const double x78 = sin(x42);
	const double x79 = x78 * x77;
	const double x80 = x43 + (-1 * x71 * x79);
	const double x81 = 1. / x80;
	const double x82 = x60 * x60;
	const double x83 = x82 * x77;
	const double x84 = x81 * x83;
	const double x85 = x75 + (x84 * x65);
	const double x86 = 1. / sqrt(1 + (-1 * (x85 * x85)));
	const double x87 = 1. / sqrt(1 + (-1 * (1. / x58) * (1. / (x43 * x43)) * x45));
	const double x88 = 2 * x41;
	const double x89 = 2 * x55;
	const double x90 = 2 * x51;
	const double x91 = (x90 * x49) + (x89 * x53);
	const double x92 = 1.0/2.0 * x41;
	const double x93 = (1. / (x58 * sqrt(x58))) * x92 * x44;
	const double x94 = x87 * ((x59 * x37) + (-1 * x93 * (x91 + (x88 * x37))));
	const double x95 = 2 * x81 * x77 * x66;
	const double x96 = x62 * x94;
	const double x97 = (x60 * (x96 + (-1 * x61 * x94))) + (x63 * x94);
	const double x98 = (x60 * x97) + (x64 * x94);
	const double x99 = 1. / x57;
	const double x100 = 1. / sqrt(1 + (-1 * (x73 * x73) * x99 * x45));
	const double x101 = x73 * (1. / (x57 * sqrt(x57))) * x92;
	const double x102 = (x74 * x37) + (-1 * x91 * x101);
	const double x103 = 1. / x55;
	const double x104 = x51 * (1. / x56);
	const double x105 = x56 * x99;
	const double x106 = ((x53 * x104) + (-1 * x49 * x103)) * x105;
	const double x107 = cos(x76) * ogeePhase_0;
	const double x108 = x107 * (x106 + (-1 * x100 * x102));
	const double x109 = x81 * x82 * x65;
	const double x110 = 2.40324066e-05 * x60;
	const double x111 = x71 * x78;
	const double x112 = (1. / (x80 * x80)) * x83 * x65;
	const double x113 = x86 * (x102 + (x109 * x108) + (x95 * x94) + (-1 * x112 * ((-1 * x108 * x111) + (-1 * x79 * ((x65 * x94) + (x70 * x94) + (x60 * (x98 + (x60 * (x97 + (x68 * x94) + (x60 * ((-1 * x94 * x110) + x96 + (x67 * x94))))) + (x69 * x94))) + (x60 * x98))))) + (x84 * x98));
	const double x114 = cos((-1 * asin(x85)) + gibPhase_0 + x72) * gibMag_0;
	const double x115 = (x50 * x90) + (x89 * x54);
	const double x116 = (x74 * x40) + (-1 * x101 * x115);
	const double x117 = ((x54 * x104) + (-1 * x50 * x103)) * x105;
	const double x118 = x117 + (-1 * x100 * x116);
	const double x119 = x109 * x107;
	const double x120 = x87 * ((x59 * x40) + (-1 * x93 * (x115 + (x88 * x40))));
	const double x121 = x62 * x120;
	const double x122 = (x60 * (x121 + (-1 * x61 * x120))) + (x63 * x120);
	const double x123 = (x60 * x122) + (x64 * x120);
	const double x124 = x107 * x111;
	const double x125 = x86 * (x116 + (x84 * x123) + (-1 * x112 * ((-1 * x118 * x124) + (-1 * x79 * ((x65 * x120) + (x70 * x120) + (x60 * (x123 + (x60 * (x122 + (x68 * x120) + (x60 * ((-1 * x110 * x120) + x121 + (x67 * x120))))) + (x69 * x120))) + (x60 * x123))))) + (x118 * x119) + (x95 * x120));
	const double x126 = (x90 * x46) + (x89 * x52);
	const double x127 = x87 * ((x59 * x11) + (-1 * x93 * (x126 + (x88 * x11))));
	const double x128 = (x74 * x11) + (-1 * x101 * x126);
	const double x129 = ((x52 * x104) + (-1 * x46 * x103)) * x105;
	const double x130 = x129 + (-1 * x100 * x128);
	const double x131 = x62 * x127;
	const double x132 = (x60 * (x131 + (-1 * x61 * x127))) + (x63 * x127);
	const double x133 = (x60 * x132) + (x64 * x127);
	const double x134 = x86 * (x128 + (-1 * x112 * ((-1 * x124 * x130) + (-1 * x79 * ((x65 * x127) + (x60 * x133) + (x70 * x127) + (x60 * (x133 + (x60 * (x132 + (x68 * x127) + (x60 * ((-1 * x110 * x127) + x131 + (x67 * x127))))) + (x69 * x127))))))) + (x95 * x127) + (x84 * x133) + (x119 * x130));
	const double x135 = 2 * (1. / (x15 * x15)) * x19;
	const double x136 = x135 * obj_qi;
	const double x137 = x21 * (1. / (x15 * sqrt(x15)));
	const double x138 = x14 * x137;
	const double x139 = (x138 * obj_qi) + (-1 * x14 * x136);
	const double x140 = x18 * x16;
	const double x141 = x13 * x140;
	const double x142 = x13 * x137;
	const double x143 = obj_qj * obj_qi;
	const double x144 = x135 * obj_qk;
	const double x145 = x137 * x143;
	const double x146 = (x145 * obj_qk) + (-1 * x144 * x143);
	const double x147 = x146 + (-1 * x22);
	const double x148 = x137 * obj_qk;
	const double x149 = x148 * obj_qi;
	const double x150 = x140 * obj_qk;
	const double x151 = x150 * obj_qi;
	const double x152 = x151 + (-1 * x149);
	const double x153 = x20 * obj_qj;
	const double x154 = x13 * x135;
	const double x155 = (x142 * obj_qj) + (-1 * x154 * obj_qj);
	const double x156 = x155 + x153;
	const double x157 = ((x156 + x152) * sensor_x) + ((x139 + x38) * sensor_y) + ((x147 + (-1 * x141) + x142) * sensor_z);
	const double x158 = x12 * x137;
	const double x159 = (x158 * obj_qi) + (-1 * x12 * x136);
	const double x160 = x146 + x22;
	const double x161 = x140 * x143;
	const double x162 = (-1 * x161) + x145;
	const double x163 = (x142 * obj_qk) + (-1 * x154 * obj_qk);
	const double x164 = x163 + x25;
	const double x165 = ((x164 + x162) * sensor_x) + ((x159 + x38) * sensor_z) + ((x160 + x141 + (-1 * x142)) * sensor_y);
	const double x166 = obj_qi * obj_qi * obj_qi;
	const double x167 = (-1 * x151) + x149;
	const double x168 = x161 + (-1 * x145);
	const double x169 = ((x168 + x164) * sensor_z) + (((2 * x32) + (x166 * x137) + x38 + (-1 * x166 * x135)) * sensor_x) + ((x156 + x167) * sensor_y);
	const double x170 = (x53 * x169) + (x54 * x157) + (x52 * x165);
	const double x171 = (x49 * x169) + (x50 * x157) + (x46 * x165);
	const double x172 = (x90 * x171) + (x89 * x170);
	const double x173 = (x37 * x169) + (x11 * x165) + (x40 * x157);
	const double x174 = (x74 * x173) + (-1 * x101 * x172);
	const double x175 = ((x104 * x170) + (-1 * x103 * x171)) * x105;
	const double x176 = x175 + (-1 * x100 * x174);
	const double x177 = x87 * ((x59 * x173) + (-1 * x93 * (x172 + (x88 * x173))));
	const double x178 = x62 * x177;
	const double x179 = (x60 * (x178 + (-1 * x61 * x177))) + (x63 * x177);
	const double x180 = (x60 * x179) + (x64 * x177);
	const double x181 = x86 * (x174 + (x84 * x180) + (-1 * x112 * ((-1 * x124 * x176) + (-1 * x79 * ((x60 * x180) + (x60 * (x180 + (x60 * (x179 + (x68 * x177) + (x60 * ((-1 * x110 * x177) + x178 + (x67 * x177))))) + (x69 * x177))) + (x65 * x177) + (x70 * x177))))) + (x119 * x176) + (x95 * x177));
	const double x182 = obj_qj * obj_qj * obj_qj;
	const double x183 = (x138 * obj_qk) + (-1 * x14 * x144);
	const double x184 = x183 + x25;
	const double x185 = x139 + x32;
	const double x186 = x148 * obj_qj;
	const double x187 = x150 * obj_qj;
	const double x188 = x187 + (-1 * x186);
	const double x189 = ((x188 + x185) * sensor_x) + (((x182 * x137) + (2 * x153) + x24 + (-1 * x182 * x135)) * sensor_y) + ((x162 + x184) * sensor_z);
	const double x190 = (x158 * obj_qj) + (-1 * x12 * x135 * obj_qj);
	const double x191 = x14 * x140;
	const double x192 = ((x147 + (-1 * x191) + x138) * sensor_x) + ((x168 + x184) * sensor_y) + ((x190 + x24) * sensor_z);
	const double x193 = (-1 * x187) + x186;
	const double x194 = ((x160 + x191 + (-1 * x138)) * sensor_z) + ((x193 + x185) * sensor_y) + ((x155 + x24) * sensor_x);
	const double x195 = (x40 * x189) + (x37 * x194) + (x11 * x192);
	const double x196 = (x54 * x189) + (x53 * x194) + (x52 * x192);
	const double x197 = (x49 * x194) + (x50 * x189) + (x46 * x192);
	const double x198 = (x90 * x197) + (x89 * x196);
	const double x199 = x87 * ((x59 * x195) + (-1 * x93 * (x198 + (x88 * x195))));
	const double x200 = (x74 * x195) + (-1 * x101 * x198);
	const double x201 = ((x104 * x196) + (-1 * x103 * x197)) * x105;
	const double x202 = x201 + (-1 * x200 * x100);
	const double x203 = x62 * x199;
	const double x204 = (x60 * (x203 + (-1 * x61 * x199))) + (x63 * x199);
	const double x205 = (x60 * x204) + (x64 * x199);
	const double x206 = x86 * (x200 + (x84 * x205) + (-1 * x112 * ((-1 * x202 * x124) + (-1 * x79 * ((x65 * x199) + (x70 * x199) + (x60 * x205) + (x60 * (x205 + (x60 * (x204 + (x68 * x199) + (x60 * ((-1 * x110 * x199) + x203 + (x67 * x199))))) + (x69 * x199))))))) + (x95 * x199) + (x202 * x119));
	const double x207 = x190 + x153;
	const double x208 = x12 * x140;
	const double x209 = ((x183 + x31) * sensor_y) + ((x160 + (-1 * x158) + x208) * sensor_x) + ((x167 + x207) * sensor_z);
	const double x210 = obj_qk * obj_qk * obj_qk;
	const double x211 = x159 + x32;
	const double x212 = ((x211 + x193) * sensor_x) + ((x152 + x207) * sensor_y) + (((2 * x25) + (-1 * x210 * x135) + x31 + (x210 * x137)) * sensor_z);
	const double x213 = ((x211 + x188) * sensor_z) + ((x147 + x158 + (-1 * x208)) * sensor_y) + ((x163 + x31) * sensor_x);
	const double x214 = (x53 * x213) + (x54 * x209) + (x52 * x212);
	const double x215 = (x49 * x213) + (x50 * x209) + (x46 * x212);
	const double x216 = (x90 * x215) + (x89 * x214);
	const double x217 = (x37 * x213) + (x40 * x209) + (x11 * x212);
	const double x218 = (x74 * x217) + (-1 * x216 * x101);
	const double x219 = ((x214 * x104) + (-1 * x215 * x103)) * x105;
	const double x220 = x219 + (-1 * x218 * x100);
	const double x221 = x87 * ((x59 * x217) + (-1 * x93 * (x216 + (x88 * x217))));
	const double x222 = x62 * x221;
	const double x223 = (x60 * (x222 + (-1 * x61 * x221))) + (x63 * x221);
	const double x224 = (x60 * x223) + (x64 * x221);
	const double x225 = x86 * ((-1 * x112 * ((-1 * x220 * x124) + (-1 * x79 * ((x65 * x221) + (x60 * x224) + (x70 * x221) + (x60 * ((x60 * (x223 + (x68 * x221) + (x60 * ((-1 * x221 * x110) + (x67 * x221) + x222)))) + x224 + (x69 * x221))))))) + (x95 * x221) + (x220 * x119) + x218 + (x84 * x224));
	out[0] = x106 + (-1 * x113) + (-1 * ((-1 * x106) + x113) * x114);
	out[1] = x117 + (-1 * x125) + (-1 * ((-1 * x117) + x125) * x114);
	out[2] = x129 + (-1 * x134) + (-1 * ((-1 * x129) + x134) * x114);
	out[3] = (-1 * x181) + x175 + (-1 * ((-1 * x175) + x181) * x114);
	out[4] = x201 + (-1 * x206) + (-1 * ((-1 * x201) + x206) * x114);
	out[5] = (-1 * x225) + x219 + (-1 * ((-1 * x219) + x225) * x114);
}

// Jacobian of reproject_axis_y_gen2 wrt [obj_px, obj_py, obj_pz, obj_qi, obj_qj, obj_qk]
static inline void gen_reproject_axis_y_gen2_jac_obj_p_axis_angle(
  double out[6],
  const LinmathAxisAnglePose* obj_p,
  const LinmathPoint3d sensor_pt,
  const LinmathAxisAnglePose* lh_p,
  const BaseStationCal* bsc1)
{
	const double obj_px = (*obj_p).Pos[0];
	const double obj_py = (*obj_p).Pos[1];
	const double obj_pz = (*obj_p).Pos[2];
	const double obj_qi = (*obj_p).AxisAngleRot[0];
	const double obj_qj = (*obj_p).AxisAngleRot[1];
	const double obj_qk = (*obj_p).AxisAngleRot[2];
	const double sensor_x = sensor_pt[0];
	const double sensor_y = sensor_pt[1];
	const double sensor_z = sensor_pt[2];
	const double lh_px = (*lh_p).Pos[0];
	const double lh_py = (*lh_p).Pos[1];
	const double lh_pz = (*lh_p).Pos[2];
	const double lh_qi = (*lh_p).AxisAngleRot[0];
	const double lh_qj = (*lh_p).AxisAngleRot[1];
	const double lh_qk = (*lh_p).AxisAngleRot[2];
	// const double phase_1 = (*bsc1).phase;
	const double tilt_1 = (*bsc1).tilt;
	const double curve_1 = (*bsc1).curve;
	const double gibPhase_1 = (*bsc1).gibpha;
	const double gibMag_1 = (*bsc1).gibmag;
	const double ogeeMag_1 = (*bsc1).ogeephase;
	const double ogeePhase_1 = (*bsc1).ogeemag;
	const double x0 = lh_qk * lh_qk;
	const double x1 = lh_qi * lh_qi;
	const double x2 = lh_qj * lh_qj;
	const double x3 = 1e-10 + x2 + x0 + x1;
	const double x4 = sqrt(x3);
	const double x5 = (1. / x4) * sin(x4);
	const double x6 = x5 * lh_qi;
	const double x7 = cos(x4);
	const double x8 = (1. / x3) * (1 + (-1 * x7));
	const double x9 = x8 * lh_qk * lh_qj;
	const double x10 = x9 + (-1 * x6);
	const double x11 = obj_qk * obj_qk;
	const double x12 = obj_qi * obj_qi;
	const double x13 = obj_qj * obj_qj;
	const double x14 = 1e-10 + x13 + x11 + x12;
	const double x15 = 1. / x14;
	const double x16 = sqrt(x14);
	const double x17 = cos(x16);
	const double x18 = 1 + (-1 * x17);
	const double x19 = x15 * x18;
	const double x20 = sin(x16);
	const double x21 = x20 * (1. / x16);
	const double x22 = x21 * obj_qj;
	const double x23 = -1 * x22;
	const double x24 = x19 * obj_qi;
	const double x25 = x24 * obj_qk;
	const double x26 = x21 * obj_qi;
	const double x27 = x19 * obj_qj;
	const double x28 = x27 * obj_qk;
	const double x29 = ((x28 + x26) * sensor_y) + ((x25 + x23) * sensor_x) + obj_pz + ((x17 + (x11 * x19)) * sensor_z);
	const double x30 = x21 * obj_qk;
	const double x31 = -1 * x30;
	const double x32 = x27 * obj_qi;
	const double x33 = ((x32 + x31) * sensor_y) + ((x25 + x22) * sensor_z) + ((x17 + (x12 * x19)) * sensor_x) + obj_px;
	const double x34 = x5 * lh_qk;
	const double x35 = x8 * lh_qi;
	const double x36 = x35 * lh_qj;
	const double x37 = x36 + x34;
	const double x38 = -1 * x26;
	const double x39 = ((x17 + (x13 * x19)) * sensor_y) + ((x32 + x30) * sensor_x) + obj_py + ((x28 + x38) * sensor_z);
	const double x40 = x7 + (x2 * x8);
	const double x41 = (x40 * x39) + (x33 * x37) + lh_py + (x29 * x10);
	const double x42 = 0.523598775598299 + (-1 * tilt_1);
	const double x43 = cos(x42);
	const double x44 = 1. / x43;
	const double x45 = x41 * x41;
	const double x46 = x7 + (x0 * x8);
	const double x47 = x5 * lh_qj;
	const double x48 = x35 * lh_qk;
	const double x49 = x48 + (-1 * x47);
	const double x50 = x9 + x6;
	const double x51 = (x50 * x39) + (x49 * x33) + lh_pz + (x46 * x29);
	const double x52 = x48 + x47;
	const double x53 = x7 + (x1 * x8);
	const double x54 = x36 + (-1 * x34);
	const double x55 = (x54 * x39) + (x53 * x33) + lh_px + (x52 * x29);
	const double x56 = x55 * x55;
	const double x57 = x56 + (x51 * x51);
	const double x58 = x57 + x45;
	const double x59 = (1. / sqrt(x58)) * x44;
	const double x60 = asin(x59 * x41);
	const double x61 = 8.0108022e-06 * x60;
	const double x62 = -8.0108022e-06 + (-1 * x61);
	const double x63 = 0.0028679863 + (x60 * x62);
	const double x64 = 5.3685255e-06 + (x60 * x63);
	const double x65 = 0.0076069798 + (x60 * x64);
	const double x66 = x60 * x60;
	const double x67 = atan2(-1 * x51, x55);
	const double x68 = tan(x42);
	const double x69 = x68 * (1. / sqrt(x57));
	const double x70 = -1 * x69 * x41;
	const double x71 = (-1 * asin(x70)) + ogeeMag_1 + x67;
	const double x72 = (sin(x71) * ogeePhase_1) + curve_1;
	const double x73 = x60 * x65;
	const double x74 = -8.0108022e-06 + (-1.60216044e-05 * x60);
	const double x75 = x63 + (x74 * x60);
	const double x76 = x64 + (x75 * x60);
	const double x77 = x65 + (x76 * x60);
	const double x78 = (x77 * x60) + x73;
	const double x79 = sin(x42);
	const double x80 = x72 * x79;
	const double x81 = x43 + (x80 * x78);
	const double x82 = 1. / x81;
	const double x83 = x82 * x72;
	const double x84 = x83 * x66;
	const double x85 = x70 + (x84 * x65);
	const double x86 = 1. / sqrt(1 + (-1 * (x85 * x85)));
	const double x87 = 1. / sqrt(1 + (-1 * (1. / x58) * (1. / (x43 * x43)) * x45));
	const double x88 = 2 * x41;
	const double x89 = 2 * x55;
	const double x90 = 2 * x51;
	const double x91 = (x90 * x49) + (x89 * x53);
	const double x92 = 1.0/2.0 * x41;
	const double x93 = (1. / (x58 * sqrt(x58))) * x92 * x44;
	const double x94 = (x59 * x37) + (-1 * x93 * (x91 + (x88 * x37)));
	const double x95 = x87 * x94;
	const double x96 = x62 * x95;
	const double x97 = (x63 * x95) + (x60 * (x96 + (-1 * x61 * x95)));
	const double x98 = (x64 * x95) + (x60 * x97);
	const double x99 = 1. / x57;
	const double x100 = 1. / sqrt(1 + (-1 * (x68 * x68) * x99 * x45));
	const double x101 = x68 * (1. / (x57 * sqrt(x57))) * x92;
	const double x102 = (-1 * x69 * x37) + (x91 * x101);
	const double x103 = 1. / x55;
	const double x104 = x51 * (1. / x56);
	const double x105 = x56 * x99;
	const double x106 = ((x53 * x104) + (-1 * x49 * x103)) * x105;
	const double x107 = x106 + (-1 * x100 * x102);
	const double x108 = cos(x71) * ogeePhase_1;
	const double x109 = x79 * x78;
	const double x110 = x109 * x108;
	const double x111 = x87 * x77;
	const double x112 = 2.40324066e-05 * x60;
	const double x113 = x65 * x66;
	const double x114 = (1. / (x81 * x81)) * x72 * x113;
	const double x115 = x82 * x113;
	const double x116 = x108 * x115;
	const double x117 = 2 * x83 * x73;
	const double x118 = x86 * ((x95 * x117) + x102 + (x107 * x116) + (x84 * x98) + (-1 * x114 * ((x80 * ((x65 * x95) + (x94 * x111) + (x60 * x98) + (x60 * (x98 + (x60 * (x97 + (x75 * x95) + (x60 * (x96 + (-1 * x95 * x112) + (x74 * x95))))) + (x76 * x95))))) + (x107 * x110))));
	const double x119 = cos((-1 * asin(x85)) + x67 + gibPhase_1) * gibMag_1;
	const double x120 = (x50 * x90) + (x89 * x54);
	const double x121 = (-1 * x69 * x40) + (x101 * x120);
	const double x122 = ((x54 * x104) + (-1 * x50 * x103)) * x105;
	const double x123 = x108 * (x122 + (-1 * x100 * x121));
	const double x124 = (x59 * x40) + (-1 * x93 * (x120 + (x88 * x40)));
	const double x125 = x87 * x124;
	const double x126 = x62 * x125;
	const double x127 = (x63 * x125) + (x60 * (x126 + (-1 * x61 * x125)));
	const double x128 = (x64 * x125) + (x60 * x127);
	const double x129 = x86 * (x121 + (x117 * x125) + (-1 * x114 * ((x80 * ((x65 * x125) + (x60 * x128) + (x111 * x124) + (x60 * (x128 + (x60 * (x127 + (x75 * x125) + (x60 * ((-1 * x112 * x125) + x126 + (x74 * x125))))) + (x76 * x125))))) + (x109 * x123))) + (x115 * x123) + (x84 * x128));
	const double x130 = (x90 * x46) + (x89 * x52);
	const double x131 = (x59 * x10) + (-1 * x93 * (x130 + (x88 * x10)));
	const double x132 = x87 * x131;
	const double x133 = x62 * x132;
	const double x134 = (x63 * x132) + (x60 * (x133 + (-1 * x61 * x132)));
	const double x135 = (x64 * x132) + (x60 * x134);
	const double x136 = (-1 * x69 * x10) + (x101 * x130);
	const double x137 = ((x52 * x104) + (-1 * x46 * x103)) * x105;
	const double x138 = x137 + (-1 * x100 * x136);
	const double x139 = x86 * ((x117 * x132) + x136 + (x116 * x138) + (x84 * x135) + (-1 * x114 * ((x80 * ((x65 * x132) + (x60 * x135) + (x111 * x131) + (x60 * (x135 + (x60 * (x134 + (x75 * x132) + (x60 * ((-1 * x112 * x132) + x133 + (x74 * x132))))) + (x76 * x132))))) + (x110 * x138))));
	const double x140 = 2 * (1. / (x14 * x14)) * x18;
	const double x141 = x140 * obj_qi;
	const double x142 = x20 * (1. / (x14 * sqrt(x14)));
	const double x143 = x13 * x142;
	const double x144 = (x143 * obj_qi) + (-1 * x13 * x141);
	const double x145 = x15 * x17;
	const double x146 = x12 * x145;
	const double x147 = x12 * x142;
	const double x148 = obj_qj * obj_qi;
	const double x149 = x140 * obj_qk;
	const double x150 = x142 * x148;
	const double x151 = (x150 * obj_qk) + (-1 * x148 * x149);
	const double x152 = x151 + (-1 * x21);
	const double x153 = x142 * obj_qk;
	const double x154 = x153 * obj_qi;
	const double x155 = x145 * obj_qk;
	const double x156 = x155 * obj_qi;
	const double x157 = x156 + (-1 * x154);
	const double x158 = x12 * x140;
	const double x159 = (x147 * obj_qj) + (-1 * x158 * obj_qj);
	const double x160 = x159 + x27;
	const double x161 = ((x160 + x157) * sensor_x) + ((x144 + x38) * sensor_y) + ((x152 + (-1 * x146) + x147) * sensor_z);
	const double x162 = x11 * x142;
	const double x163 = (x162 * obj_qi) + (-1 * x11 * x141);
	const double x164 = x151 + x21;
	const double x165 = x19 * obj_qk;
	const double x166 = (x147 * obj_qk) + (-1 * x158 * obj_qk);
	const double x167 = x166 + x165;
	const double x168 = x145 * x148;
	const double x169 = (-1 * x168) + x150;
	const double x170 = ((x169 + x167) * sensor_x) + ((x163 + x38) * sensor_z) + ((x164 + x146 + (-1 * x147)) * sensor_y);
	const double x171 = obj_qi * obj_qi * obj_qi;
	const double x172 = (-1 * x156) + x154;
	const double x173 = x168 + (-1 * x150);
	const double x174 = ((x167 + x173) * sensor_z) + (((2 * x24) + x38 + (x171 * x142) + (-1 * x171 * x140)) * sensor_x) + ((x160 + x172) * sensor_y);
	const double x175 = (x49 * x174) + (x50 * x161) + (x46 * x170);
	const double x176 = (x53 * x174) + (x54 * x161) + (x52 * x170);
	const double x177 = ((x104 * x176) + (-1 * x103 * x175)) * x105;
	const double x178 = (x37 * x174) + (x10 * x170) + (x40 * x161);
	const double x179 = (x90 * x175) + (x89 * x176);
	const double x180 = (x59 * x178) + (-1 * x93 * (x179 + (x88 * x178)));
	const double x181 = x87 * x180;
	const double x182 = x62 * x181;
	const double x183 = (x63 * x181) + (x60 * (x182 + (-1 * x61 * x181)));
	const double x184 = (x64 * x181) + (x60 * x183);
	const double x185 = (-1 * x69 * x178) + (x101 * x179);
	const double x186 = x177 + (-1 * x100 * x185);
	const double x187 = x86 * ((x117 * x181) + x185 + (x116 * x186) + (x84 * x184) + (-1 * x114 * ((x80 * ((x65 * x181) + (x60 * x184) + (x111 * x180) + (x60 * (x184 + (x60 * ((x75 * x181) + x183 + (x60 * (x182 + (-1 * x112 * x181) + (x74 * x181))))) + (x76 * x181))))) + (x110 * x186))));
	const double x188 = obj_qj * obj_qj * obj_qj;
	const double x189 = (x143 * obj_qk) + (-1 * x13 * x149);
	const double x190 = x189 + x165;
	const double x191 = x144 + x24;
	const double x192 = x153 * obj_qj;
	const double x193 = x155 * obj_qj;
	const double x194 = x193 + (-1 * x192);
	const double x195 = ((x194 + x191) * sensor_x) + (((2 * x27) + (x188 * x142) + x23 + (-1 * x188 * x140)) * sensor_y) + ((x169 + x190) * sensor_z);
	const double x196 = (x162 * obj_qj) + (-1 * x11 * x140 * obj_qj);
	const double x197 = x13 * x145;
	const double x198 = ((x173 + x190) * sensor_y) + ((x152 + (-1 * x197) + x143) * sensor_x) + ((x196 + x23) * sensor_z);
	const double x199 = (-1 * x193) + x192;
	const double x200 = ((x164 + x197 + (-1 * x143)) * sensor_z) + ((x199 + x191) * sensor_y) + ((x159 + x23) * sensor_x);
	const double x201 = (x53 * x200) + (x54 * x195) + (x52 * x198);
	const double x202 = (x49 * x200) + (x50 * x195) + (x46 * x198);
	const double x203 = (x90 * x202) + (x89 * x201);
	const double x204 = (x40 * x195) + (x37 * x200) + (x10 * x198);
	const double x205 = (-1 * x69 * x204) + (x203 * x101);
	const double x206 = ((x201 * x104) + (-1 * x202 * x103)) * x105;
	const double x207 = x206 + (-1 * x205 * x100);
	const double x208 = (x59 * x204) + (-1 * x93 * (x203 + (x88 * x204)));
	const double x209 = x87 * x208;
	const double x210 = x62 * x209;
	const double x211 = (x63 * x209) + (x60 * (x210 + (-1 * x61 * x209)));
	const double x212 = (x64 * x209) + (x60 * x211);
	const double x213 = x86 * ((x209 * x117) + (x84 * x212) + x205 + (-1 * x114 * ((x80 * ((x60 * (x212 + (x60 * (x211 + (x75 * x209) + (x60 * (x210 + (-1 * x209 * x112) + (x74 * x209))))) + (x76 * x209))) + (x208 * x111) + (x65 * x209) + (x60 * x212))) + (x207 * x110))) + (x207 * x116));
	const double x214 = x196 + x27;
	const double x215 = x11 * x145;
	const double x216 = ((x164 + (-1 * x162) + x215) * sensor_x) + ((x189 + x31) * sensor_y) + ((x172 + x214) * sensor_z);
	const double x217 = obj_qk * obj_qk * obj_qk;
	const double x218 = x163 + x24;
	const double x219 = ((x218 + x199) * sensor_x) + ((x157 + x214) * sensor_y) + ((x31 + (2 * x165) + (-1 * x217 * x140) + (x217 * x142)) * sensor_z);
	const double x220 = ((x218 + x194) * sensor_z) + ((x152 + x162 + (-1 * x215)) * sensor_y) + ((x166 + x31) * sensor_x);
	const double x221 = (x37 * x220) + (x40 * x216) + (x10 * x219);
	const double x222 = (x53 * x220) + (x54 * x216) + (x52 * x219);
	const double x223 = (x49 * x220) + (x50 * x216) + (x46 * x219);
	const double x224 = (x90 * x223) + (x89 * x222);
	const double x225 = (x59 * x221) + (-1 * x93 * (x224 + (x88 * x221)));
	const double x226 = x87 * x225;
	const double x227 = x62 * x226;
	const double x228 = (x63 * x226) + (x60 * (x227 + (-1 * x61 * x226)));
	const double x229 = (x64 * x226) + (x60 * x228);
	const double x230 = (-1 * x69 * x221) + (x224 * x101);
	const double x231 = ((x222 * x104) + (-1 * x223 * x103)) * x105;
	const double x232 = x231 + (-1 * x230 * x100);
	const double x233 = x86 * (x230 + (-1 * x114 * ((x80 * ((x65 * x226) + (x60 * x229) + (x225 * x111) + (x60 * ((x60 * (x228 + (x75 * x226) + (x60 * ((-1 * x226 * x112) + (x74 * x226) + x227)))) + x229 + (x76 * x226))))) + (x232 * x110))) + (x226 * x117) + (x84 * x229) + (x232 * x116));
	out[0] = (-1 * x118) + (-1 * ((-1 * x106) + x118) * x119) + x106;
	out[1] = (-1 * ((-1 * x122) + x129) * x119) + (-1 * x129) + x122;
	out[2] = (-1 * ((-1 * x137) + x139) * x119) + (-1 * x139) + x137;
	out[3] = (-1 * ((-1 * x177) + x187) * x119) + x177 + (-1 * x187);
	out[4] = (-1 * ((-1 * x206) + x213) * x119) + (-1 * x213) + x206;
	out[5] = (-1 * ((-1 * x231) + x233) * x119) + (-1 * x233) + x231;
}

// This is a custom gtsam factor for predicting a Gen2 lighthouse angle about axis 0 (x) or 1 (y).
class Gen2LightAngleFactor : public NoiseModelFactor2<Pose3, Pose3> {
  typedef NoiseModelFactor1<Pose3, Pose3> Base;
  typedef Gen2LightAngleFactor This;

 public:
  Gen2LightAngleFactor() {}

  Gen2LightAngleFactor(
    Key key_lTg,                    // gtsam::Key for global -> lighthouse frame transform
    Key key_gTb,                    // gtsam::Key for body -> global frame transform
    const double & angle,           // Measured agle in radians
    const SharedNoiseModel& model,  // Noise model
    bool is_y_axis,                 // if true, axis = 1 else axis = 0       
    const Point3 & sensor,          // Pose of the sensor in the body frame
    const BaseStationCal & bcal)    // Base station calibration
      : Base(model, key_lTg, key_gTb)
      , angle_(angle)
      , is_y_axis_(is_y_axis)
      , bcal_(bcal)
  {
    sensor_pt_[0] = sensor[0];
    sensor_pt_[1] = sensor[1];
    sensor_pt_[2] = sensor[2];
  }

  Vector evaluateError(
    const Pose3& lTg,
    const Pose3& gTb,
    boost::optional<Matrix&> H1 = boost::none,
    boost::optional<Matrix&> H2 = boost::none) const override
  {
    LinmathAxisAnglePose lh_p, obj_p;
    
    auto [lTg_axis, lTg_angle] = lTg.rotation().axisAngle();
    lh_p.Pos[0] = lTg.translation().x();
	lh_p.Pos[1] = lTg.translation().y();
	lh_p.Pos[2] = lTg.translation().z();
    lh_p.AxisAngleRot[0] = lTg_axis.unitVector().x() * lTg_angle;
	lh_p.AxisAngleRot[1] = lTg_axis.unitVector().y() * lTg_angle;
	lh_p.AxisAngleRot[2] = lTg_axis.unitVector().z() * lTg_angle;

    auto [gTb_axis, gTb_angle] = gTb.rotation().axisAngle();
    obj_p.Pos[0] = gTb.translation().x();
	obj_p.Pos[1] = gTb.translation().y();
	obj_p.Pos[2] = gTb.translation().z();
    obj_p.AxisAngleRot[0] = gTb_axis.unitVector().x() * gTb_angle;
	obj_p.AxisAngleRot[1] = gTb_axis.unitVector().y() * gTb_angle;
	obj_p.AxisAngleRot[2] = gTb_axis.unitVector().z() * gTb_angle;

    double predicted_angle = is_y_axis_
        ? gen_reproject_axis_y_gen2_axis_angle(&obj_p, sensor_pt_, &lh_p, &bcal_)
        : gen_reproject_axis_x_gen2_axis_angle(&obj_p, sensor_pt_, &lh_p, &bcal_);

	/////////////////////////////////////////////////////		
	// Helps find stray nans 
	/////////////////////////////////////////////////////
	static std::mutex mutex;
	if (std::isnan(predicted_angle)) {		
		std::scoped_lock lock(mutex);
		std::cout << "NaN detected ********** " << std::endl 
		<< "I: " << angle_ << std::endl
		<< "O: " << predicted_angle << std::endl
		<< "b_p:t[0]: " << obj_p.Pos[0] << std::endl
		<< "b_p:t[1]: " << obj_p.Pos[1] << std::endl
		<< "b_p:t[2]: " << obj_p.Pos[2] << std::endl
		<< "b_p:r[0]: " << obj_p.AxisAngleRot[0] << std::endl
		<< "b_p:r[1]: " << obj_p.AxisAngleRot[1] << std::endl
		<< "b_p:r[2]: " << obj_p.AxisAngleRot[2] << std::endl
		<< "l_p:t[0]: " << lh_p.Pos[0] << std::endl
		<< "l_p:t[1]: " << lh_p.Pos[1] << std::endl
		<< "l_p:t[2]: " << lh_p.Pos[2] << std::endl
		<< "l_p:r[0]: " << lh_p.AxisAngleRot[0] << std::endl
		<< "l_p:r[1]: " << lh_p.AxisAngleRot[1] << std::endl
		<< "l_p:r[2]: " << lh_p.AxisAngleRot[2] << std::endl
		<< "b_sen[0]: " << sensor_pt_[0] << std::endl
		<< "b_sen[1]: " << sensor_pt_[1] << std::endl
		<< "b_sen[2]: " << sensor_pt_[2] << std::endl
		<< "c:phase: " << bcal_.phase << std::endl
		<< "c:tilt: " << bcal_.tilt << std::endl
		<< "c:curve: " << bcal_.curve << std::endl
		<< "c:gibpha: " << bcal_.gibpha << std::endl
		<< "c:gibmag: " << bcal_.gibmag << std::endl
		<< "c:ogeephase: " << bcal_.ogeephase << std::endl
		<< "c:ogeemag: " << bcal_.ogeemag<< std::endl;
		exit(0);
	}

	/////////////////////////////////////////////////////		

    if (H1) {
      double J[6];
      if (is_y_axis_) {
        gen_reproject_axis_y_gen2_jac_lh_p_axis_angle(J, &obj_p, sensor_pt_, &lh_p, &bcal_);
      } else {
        gen_reproject_axis_x_gen2_jac_lh_p_axis_angle(J, &obj_p, sensor_pt_, &lh_p, &bcal_);
      }
      *H1 = (gtsam::Matrix(1, 6) << J[0], J[1], J[2], J[3], J[4], J[5]).finished();
    }

    if (H2) {
      double J[6];
      if (is_y_axis_) {
        gen_reproject_axis_y_gen2_jac_obj_p_axis_angle(J, &obj_p, sensor_pt_, &lh_p, &bcal_);
      } else {
        gen_reproject_axis_x_gen2_jac_obj_p_axis_angle(J, &obj_p, sensor_pt_, &lh_p, &bcal_);
      }
      *H2 = (gtsam::Matrix(1, 6) << J[0], J[1], J[2], J[3], J[4], J[5]).finished();
    }
    
	return Vector1(predicted_angle - angle_);
  }

 private:
  double angle_;
  bool is_y_axis_;
  BaseStationCal bcal_;
  LinmathPoint3d sensor_pt_;

 public:
  GTSAM_MAKE_ALIGNED_OPERATOR_NEW
};

}  // namespace gtsam

#endif  // LIBSURVIVE_ROS2__POSER_FACTORS_HPP_
